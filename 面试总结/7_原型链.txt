1.声明对象的方法

	1.使用字面量或Object声明对象
		var o1 = {};
		var o2 = new Object();
		var o2 = new Object({name:'o2'});
		他们的原型对象都是Object.prototype

	2.使用构造函数声明对象
		function M(obj) {
			this.name = obj.name || 'M';
		}
		var o3 = new M;  //没有参数可以省略()
		var o4 = new M({name:'zhangsan'}); 

		他们的原型对象是M.prototype

	3.使用Object.create()声明对象
		var o6 = Object.create({name:'zhangsan'});
		他的原型对象是传入的对象参数

2.原型链
	看图 7_原型链.jpg


补充：每一个原型对象中都有一个construtor属性指向它对应的构造函数


扩展：
	instranceof
	实现一个instranceof： obj instanceof func

	function instanceof(obj, func) {
		if(obj.__proto__ === func.prototype) {
			return true;
		} else {
			if(obj.__proto__ === Object.prototype) {
				return false;
			}
			instanceof(obj.__proto__, func);
		}
	}

	通过obj.__proto__一直到Object.prototype，如果在原型链上的构造函数都不匹配，则返回false

	弊端：不能判断是不是func实例化出的obj


	需要用obj.__proto__.construtor === func来判断




