1.通过构造函数实现继承

	function Parent() {
		this.name = 'parent';
	}
	function Child() {
		Parent.call(this);   //调用Parent构造函数，但是通过call将Parent中的this变为当前通过Child构造函数实例化出的对象，
		即将Parent中的属性挂载到Child实例化出的对象上，以此实现继承
		this.type = 'child';
	}

	缺点：只能继承父构造函数中的属性或方法，不能继承父构造函数的原型对象中的方法

2.通过原型对象实现继承

	function Parent2() {
		this.name = 'parent2';
		this.arr = [1,2,3];
	}
	Parent2.prototype = {
		say: function () {
			console.log('hello world');
		}
	}
	function Child2() {
		this.type = 'child2';
	}
	Child2.prototype = new Parent2();  
	//使Child2的prototype指向Parent2实例化出的对象，即将Parent2实例化出的对象作为Child2构造函数的原型对象

	new Child2().__proto__ === Child2.prototype  //true
	new Child2().name  //parent2
	new Child2().say()  //hello world

	缺点: var c1 = new Child2();
		  var c2 = new Child2();
		  console.log(c1.arr, c2.arr)  //[1,2,3]  [1,2,3]
		  c1.arr.push(4);
		  console.log(c1.arr, c2.arr)  //[1,2,3,4]  [1,2,3,4]

		  如果父构造函数中有引用类型的属性时，当Child2的一个实例化对象改变了引用中的数据(不是改变栈中的地址，而是改变堆中的数据)，那么由Child2实例化出的其他对象中的对应的引用数据也会发生相应的改变


3.组合方法
	
	function parent3() {
		this.name = 'name';
		this.arr = [1,2,3];
	}

	function child3() {
		parent3.call(this);   //1
		this.type = 'child3';
	}
	child3.prototype = new parent3();  //2
	var child1 = new Child3();
	var child2 = new Child3();
	console.log(child1.arr, child2.arr)  //[1,2,3]  [1,2,3]
	child1.arr.push(4);
	console.log(child1.arr, child2.arr)  //[1,2,3,4]  [1,2,3]

	虽然解决了引用类型的问题，但是又有了新的问题，其中parent3构造函数执行了两次

4.优化一

	function parent4() {
		this.name = 'name';
		this.arr = [1,2,3];
	}

	function child4() {
		parent4.call(this);   
		this.type = 'child4';
	}
	child3.prototype = parent4.prototype;
	//这样parent4就执行了一次
	var c = new child4();
	console.log(c instanceof child4, c instanceof parent4); //true   true
	console.log(c.constructor);  //parent4
	//这样又有了新的问题，child4与parent4公用一个原型对象，而parent4的原型对象的constructor属性指向parent4，导致无法判断child4实例化对象的直接构造函数是谁

5.优化二

	function parent5() {
		this.name = 'name';
		this.arr = [1,2,3];
	}

	function child5() {
		parent5.call(this);   
		this.type = 'child5';
	}
	child5.prototype = Object.create(parent5.prototype);
	//创建一个中间对象，该对象是child5的原型对象，而该对象的原型对象是parent4.prototype
	child5.prototype.constructor = child5;
	//新创建的对象没有constructor属性，如果不创建的话，优化一中的问题还是存在，而创建后则优化一中的问题被解决了
	var c5 = new child5();
	console.log(c5 instanceof child5, c5 instanceof parent5); //true   true
	console.log(c5.constructor);  //child5


